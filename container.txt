# PiD 1 is always image proc
COntainer run from images. First need to remove container

sudo docker run hello-world  : creates a container from image (helo world)
docker images : available image
docker ps : running container
docker ps -a : all containers
docker run --name webapp -d -p 9080:80 nginx  (-d in background)
docker inspect <container_name> : gives details about it
docker stop <container_name/id>
docker start <container_name/id>
docker rm <container_name>
docker rmi <image.
docker exec  : execute cmds on containers
docker pull  : only gets the image, doesnt run

docker compose (reads a file)

docker compos up -d
docker compose down (stop all containers)
docker system prune -a
______________________

    1  git clone https://github.com/devopshydclub/emartapp.git       c noqueue master br-2828d200a570 state UP group default
    2  cd emartapp/
    3  ls
    4  cat docker-compose.yaml
    5  docker ps                                                     c noqueue master br-2828d200a570 state UP group default
    6  docker ps -a
    7  docker compose up -d
    8  docker compose ps
    9  ip addr show                                                  c noqueue master br-2828d200a570 state UP group default
   10  history

   ______________________

DOcker image: archieved Cotainer, readonly, 
Repository = Registry

docker images -> list all locally

______________________
-d  : detached in background
--name <name>  : give container a name
-p 8080:80  : ovntainer run prinvate network. Map 8080 to private 80 prot. Prot mapping/ forwarding

______________________

docker exec  : execute cmds on containers
docker exec <container_name> cmd
docker exec myweb ls /

docker exec -it myweb /bin/bash  : interactive attach to bash. Gets inside container, like ssh
docker exec -it myweb /bin/sh 

______________________ DOCKER LOGS
docker inspect <image>
docker inspect <container>
first runs entry point, then from {cmd}  
docker run -d -P nginx  : runs in background, auto port mapping 
if done without -d, runs in foreground, takes terminal

Variable export, docker run -d -P -e MYSQL_ROOT_PASSWORD=admin123 mysql

COntainers are volatile, need stateful ones -> COntainer VOlumes

docker run --name db -d -e MYSQL_ROOT_PASSWORD=admin123 -p 3030:3306 -v /root/vdata:/var/lib/mysql mysql
-v maps a directory to registry of container. Bind mount
 
 Binds: where it storing data
 ______________________Docker VOlume
 docker volume create mydb
  docker volume ls

  docker run --name db -d -e MYSQL_ROOT_PASSWORD=admin123 -p 3030:3306 -v mydb:/var/lib/mysql mysql

______________________DockerFile
From  : base image
Lables : Add key value to image
Run : exe a command
Add/COpy : add files and folder to image
CMd  : Runs binaries/commands on docker run
ENtrpount: allows youu to configure a conainer that will run as exe
Volume: create a mount point and mounts to external volume
Expose : port the process is binding to 
ENv : env vvar
Workdir " landing point after attach or exec
User : sets UiD
Arg : var assed at build time
ONbuild : when current is used as base img

EntryPoint: Usse need to pass args, if not there.
if Entrypoint {echo}, then CMD {hello}, then prints {hello} else prints passed args 


RUN - command triggers while we build the docker image.

CMD - command triggers while we launch the created docker image.

https://bootstrapmade.com/content/templatefiles/Arsha/Arsha.zip

______________________Docker Conpose

services = container
build : .    {expects docker file in same dir}
docker-compose up --detached
docker-compose dowm : removes and stops container
docker-compose ps
docker-compose top